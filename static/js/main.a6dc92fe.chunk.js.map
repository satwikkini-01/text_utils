{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","role","aria-checked","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","_useState3","_useState4","nValue","setNValue","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","length","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","repeat","e","split","filter","element","defaultProps","about","Alert","height","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","cls","body","components_Alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.a6dc92fe.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n//import { Link } from 'react-router-dom/cjs/react-router-dom.min'\n\n\nexport default function Navbar(props) {\n  return (\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n    <div className=\"container-fluid\">\n        <a  className=\"navbar-brand\" href=\"\\\">{props.title}</a>\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n        <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n            <li className=\"nav-item\">\n            <a className=\"nav-link active\" aria-current=\"page\" href=\"\\\">Home</a>\n            </li>\n            {/* <li className=\"nav-item\">\n            <a className=\"nav-link\" href=\"/about\">{props.about}</a>\n            </li> */}\n            <li className=\"nav-item\">\n            </li>\n        </ul>\n        {/* <form className=\"d-flex\" role=\"search\">\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\n            <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\n        </form> */}\n        {/* <button type=\"button\" onClick={()=>{props.toggleMode('primary')}} className=\"btn btn-outline-primary\">Blue</button>\n        <button type=\"button\" onClick={()=>{props.toggleMode('danger')}} className=\"btn btn-outline-danger\">Red</button>\n        <button type=\"button\" onClick={()=>{props.toggleMode('success')}} className=\"btn btn-outline-success\">Green</button>\n        <button type=\"button\" onClick={()=>{props.toggleMode('warning')}} className=\"btn btn-outline-warning\">Yellow</button> */}\n        </div>\n        <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'} mx-3`}>\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role='switch' \n            aria-checked=\"true\" id=\"flexSwitchCheckDefault\"/>\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\n        </div>\n    </div>\n    </nav>\n  )\n}\n\nNavbar.propTypes = {\n    title: PropTypes.string.isRequired,\n    about: PropTypes.string.isRequired\n}\n\nNavbar.defaultProps = {\n    title: 'Set Title Here',\n    about: 'Set About Here'\n}","import React, {useState} from 'react'\n\n\nexport default function TextForm(props) {\n    const handleUpClick = ()=>{\n        if(text.length>0){\n            let newText = text.toUpperCase()\n            setText(newText)\n            props.showAlert(\"Converted to UpperCase!\",\"success\");\n        }\n        else{\n            props.showAlert(\"Text panel is empty\",\"warning\");\n        } \n    }\n\n    const handleLoClick = ()=>{\n        if(text.length>0){\n            let newText = text.toLowerCase()\n            setText(newText)\n            props.showAlert(\"Converted to LowerCase!\",\"success\");\n        }\n        else{\n            props.showAlert(\"Text panel is empty\",\"warning\");\n        } \n    }\n\n    const handleClClick = ()=>{\n        if(text.length>0){\n            let newText = \"\";\n            setText(newText);\n            props.showAlert(\"Cleared !\",\"success\");\n        }\n        else{\n            props.showAlert(\"Text panel is already cleared!\",\"warning\");\n        }\n    }\n\n    const handleReClick = ()=>{\n        if(text.length>0){\n            let newText = text.repeat(nValue)\n            setText(newText)\n            props.showAlert(\"Repeated n times\",\"success\");\n        }\n        else{\n            props.showAlert(\"Text panel is empty !\",\"warning\");\n        }\n        \n    }\n\n    const handleCopy = ()=>{\n        if(text.length>0){\n            let newText = document.getElementById('myBox')\n            newText.select()\n            navigator.clipboard.writeText(newText.value)\n            props.showAlert(\"Copied to Clipboard! \",\"success\");\n        }\n        else{\n            props.showAlert(\"Text panel is empty !\",\"warning\");\n        }\n    }\n\n    const handleOnChange = (event)=>{\n        setText(event.target.value)\n    }\n    const preText = \"Type something to preview\";\n\n    const [text, setText] = useState(\"\");\n    const [nValue, setNValue] = useState(5);\n\n  return (\n    <>\n    <div className='container'>\n        <div className=\"mb-3\">\n        <label htmlFor=\"myBox\" style={{color: props.mode==='light'?'black':'white' }} className=\"form-label\"><h1>{props.heading}</h1></label>\n        <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'#4a4a4a':'white',color: props.mode==='light'?'black':'white' }} id=\"myBox\" rows=\"8\"></textarea>\n        </div>\n        <button className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClick}>UPPER CASE</button>\n        <button className=\"btn btn-primary mx-1 my-1\" onClick={handleLoClick}>lower case</button>\n        <button className=\"btn btn-primary mx-1 my-1\" onClick={handleClClick}>Clear</button>\n        <button className=\"btn btn-primary mx-1 my-1\" onClick={handleCopy}>Copy Text</button>\n        <button className=\"btn btn-primary mx-1 my-1\" onClick={handleReClick}>Repeat times</button>\n\n        <select value={nValue} onChange={e=>setNValue(e.target.value)}>\n            <option>2</option>\n            <option>3</option>\n            <option>4</option>\n            <option>5</option>\n            <option>6</option>\n            <option>7</option>\n            <option>8</option>\n            <option>9</option>\n            <option>10</option>\n        </select>\n    </div>\n    <div className=\"container my-3\" style={{color: props.mode==='light'?'black':'white' }}>\n        <h1>Your Text Summary</h1>\n        <p>{text.split(/\\s/).filter((element)=>{return element.length!==0}).length} words and {text.length} characters</p>\n        <p>{0.008 * text.split(/\\s/).filter((element)=>{return element.length!==0}).length} Minutes required to read</p>\n        <h2>Preview</h2>\n        <p>{text.length>0?text:preText}</p>\n    </div>\n    </>\n  )\n}\n","import React from 'react'\n\nfunction Alert(props) {\n\n    const capitalize = (word)=>{\n        var lower = word.toLowerCase();\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\n    }\n\n  return (\n    <div style={{height: '60px'}}>\n      {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n          <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\n      </div>}\n    </div>\n  )\n}\n\nexport default Alert\n","import React, {useState} from 'react'\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\n//import About from './components/About'\n//import About from './components/About';\n//import { BrowserRouter as Router,Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode,setMode] = useState('light')\n  const [alert,setAlert] = useState(null)\n\n  // const removeBg = ()=>{\n  //   document.body.classList.remove('bg-light');\n  //   document.body.classList.remove('bg-dark');\n  //   document.body.classList.remove('bg-primary');\n  //   document.body.classList.remove('bg-warning');\n  //   document.body.classList.remove('bg-success');\n  //   document.body.classList.remove('bg-danger');\n  // }\n\n  const toggleMode =(cls)=>{\n    // removeBg();\n    // document.body.classList.add('bg-'+cls)\n    if(mode==='light'){\n      setMode('dark');\n      document.body.style.backgroundColor='#411e52';\n      showAlert(\"Dark Mode has been enabled\",\"success\")\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor='white';\n      showAlert(\"Light Mode has been enabled\",\"success\")\n    }\n  }\n\n  const showAlert =(message,type)=>{\n    setAlert({\n      msg : message,\n      type : type\n    })\n    setTimeout(() => {\n        setAlert(null);\n    }, 1500);\n  }\n\n  return (\n    <>\n    {/* <Router> */}\n    <Navbar title=\"TextUtils\" about=\"About\" mode={mode} toggleMode= {toggleMode}/>\n    <Alert alert={alert}/>\n    <div className=\"container\">\n    <TextForm heading = \"Enter the text below to analyze\" mode={mode} showAlert={showAlert}/>\n    {/* <Switch> */}\n      {/* <Route path=\"/About\"><About/></Route> */}\n      {/* <Route path=\"/\"> */}\n                {/* <TextForm heading = \"Enter the text below to analyze\" mode={mode} showAlert={showAlert}/> */}\n            {/* </Route> */}\n            {/* </Switch> */}\n    </div>\n    {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}